#!/usr/bin/python

import sys
import re
import subprocess
from optparse import OptionParser
from urlparse import urlparse

def run_ab(url, n, c):
    cmd = 'ab -n%s -c%s %s' % (n, c,  url)
    print cmd
    ab_res = subprocess.Popen(cmd.split(), stdout=subprocess.PIPE).communicate()[0]

    regex = re.compile('(\d+)$')
    for line in ab_res.split('\n'):
        if '50%' in line:
            return int(regex.search(line).group(1))

def versus(url1, url2,  n, c):
    res1 = run_ab(url1, n, c)
    res2 = run_ab(url2, n, c)
    return [res1, res2]

COLOR = {
    'green': '\033[1;32m%s\033[0m',
    'red': '\033[1;31m%s\033[0m',
    'magenta': '\033[1;35m%s\033[0m',
}

def color(text, color):
    try:
        return COLOR[color] % text
    except KeyError, e:
        return text

def usage():
    print 'USAGE: abvs [-n number_of_requests] [-c number_concurrent_requests] url1 url2.'
    print'You can also use any ab (apache bench) option.'
    print'Example : abvs -n 100 -c 10 http://www.google.com/ http://www.google.fr/'
    sys.exit(1)

def main():
    parser = OptionParser()
    parser.add_option('-n', '--number', dest="n",
                  help="Number of iterations", type='int', default=100)
    parser.add_option('-c', '--concurrency', dest="c",
                  help="Concurrency", type='int', default=10)
    (options, args) = parser.parse_args()

    try:
        url1, url2 = args
        p1 = urlparse(url1)
        p2 = urlparse(url2)

        if p1.scheme == '' or p2.scheme == '' or p1.path[0] != '/' or p2.path[0] != '/':
            usage()

        res = versus(url1, url2, options.n, options.c)

        result = abs(1- res[0]/float(res[1])) * 100

        url1 = color("%s (%d ms)" % (url1, res[0]) , 'green' if res[0] < res[1] else 'red')
        url2 = color("%s (%d ms)" % (url2, res[1]), 'green' if res[0] > res[1] else 'red')
        cmp = color("%d%% %s" % (result, 'faster' if res[0] < res[1] else 'slower'), 'magenta')

        print "%s is %s than %s" % (url1, cmp, url2)
    except IndexError, e:
        usage()

if __name__ == '__main__':
    main()